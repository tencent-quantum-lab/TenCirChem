{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0191bb28-28d7-44e1-98c4-5c6cfe18b6f9",
   "metadata": {},
   "source": [
    "# Noisy Circuit Simulation\n",
    "## Overview\n",
    "In this notebook, we will show how to perform noisy circuit simulation using TenCirChem. The hydrogen molecule $\\rm{H}_2$ is used for the demonstration. Using parity transformation, the system corresponds to 2 qubits.\n",
    "We will firstly illustrate the workflow step by step, and then use well-wrapped high-level interfaces to complete the same task with much fewer lines of code.\n",
    "We will also show it is possible to use Qiskit ansatz directly in TenCirChem.\n",
    "In the end, we study the effect of gate noise and the number of measurement shots on the accuracy and uncertainty of VQE."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4fb5490-5cb1-4bc7-bdf5-c245e39149f8",
   "metadata": {},
   "source": [
    "## Setup\n",
    "TenCirChem uses the `HEA` class for noisy circuit simulation, which has a different set of interfaces from the UCC classes. \n",
    "A primary reason is that *all* ideal UCC circuits are too large for both noisy circuit simulation and execution on state of the art quantum devices.\n",
    "Consequently, usually hardware-efficient ansatz (HEA) have to be adopted for such tasks.\n",
    "Another reason is that inherently the workflow for the noiseless UCC circuit simulation and noisy HEA circuit simulation are very different."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db2a228b-9150-47cc-815c-07ebec4aa3b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tencirchem import HEA\n",
    "from tencirchem.molecule import h2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0401605-86d4-43ba-8c6f-9c19d234aaee",
   "metadata": {},
   "source": [
    "## Define the Hamiltonian\n",
    "The first difference between `UCC` and `HEA` is that the `HEA` class is not initialized by molecular inputs.\n",
    "Rather, `HEA` accepts the Hamiltonian in `openfermion.QubitOperator` form and the circuit ansatz for inputs.\n",
    "To facilitate defining the Hamiltonian, the `UCC` class provides several useful shortcuts via class attributes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0e8345ef-a98a-4d6a-b5fc-e252dcfbb158",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7141392859919029 [] +\n",
       "-1.2527052599711868 [0^ 0] +\n",
       "-0.48227117798977825 [0^ 1^ 0 1] +\n",
       "-0.6745650967143663 [0^ 2^ 0 2] +\n",
       "-0.18126641677772592 [0^ 2^ 1 3] +\n",
       "-0.6635375947675042 [0^ 3^ 0 3] +\n",
       "-0.18126641677772592 [0^ 3^ 1 2] +\n",
       "-0.47569770336145906 [1^ 1] +\n",
       "-0.18126641677772592 [1^ 2^ 0 3] +\n",
       "-0.6635375947675038 [1^ 2^ 1 2] +\n",
       "-0.18126641677772592 [1^ 3^ 0 2] +\n",
       "-0.6974673850129379 [1^ 3^ 1 3] +\n",
       "-1.2527052599711868 [2^ 2] +\n",
       "-0.48227117798977825 [2^ 3^ 2 3] +\n",
       "-0.47569770336145906 [3^ 3]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tencirchem import UCCSD\n",
    "\n",
    "uccsd = UCCSD(h2)\n",
    "# Hamiltonian as openfermion.FermionOperator\n",
    "h_fermion_op = uccsd.h_fermion_op\n",
    "h_fermion_op"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6a36370f-8eb9-46fb-b4a7-2e4a0fad24b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from tencirchem import parity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b1eb25d-35ad-42f2-b324-7d51c357e6a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.33948675952516477 [] +\n",
       "0.18126641677772592 [X0 X1] +\n",
       "-0.39422935037950685 [Z0] +\n",
       "-0.01123932304807404 [Z0 Z1] +\n",
       "0.3942293503795067 [Z1]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# use parity transformation for qubit Hamiltonian and remove 2 qubits\n",
    "h_qubit_op = parity(h_fermion_op, uccsd.n_qubits, uccsd.n_elec)\n",
    "h_qubit_op"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7de06ff3-aabf-4b41-a903-4d6f92d81fc1",
   "metadata": {},
   "source": [
    "An alternative approach is to use openfermion tools such as `openfermion.MolecularData`.\n",
    "\n",
    "## Define the ansatz\n",
    "Next, define the ansatz using TensorCircuit. A 1-layer $R_y$ ansatz composed of 4 parameters is constructed. A TensorCircuit ansatz is a function that has one argument (the circuit parameters) and returns the parameterized circuit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3a77d6c-5a76-41d8-9eaa-bf1a228b3c57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAATEAAACuCAYAAABeIjpKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAUUElEQVR4nO3dfVRVdb7H8Tf4BPKgIDgQqPgAoSg4anh1rInCmUgtszFtzKnGcpoya3KkP2ZVM3dWdUm7a2XNjLqaGWu6MczV6irOjFbkGrOHwdBylJVCoh7gpEcQFZ9Azv3jjCSJeQ4czua3z+e1lgvZZz98Zf/4uPdv//beIW63242IiKFCrS5ARKQzFGIiYjSFmIgYTSEmIkZTiImI0RRiImI0hZiIGE0hJiJGU4iJiNEUYiJiNIWYiBhNISYiRlOIiYjRFGIiYjSFmIgYTSEmIkZTiImI0RRiImI0hZiIGE0hJiJGU4iJiNEUYiJiNIWYiBhNISYiRlOIiYjRFGIiYjSFmIgYTSEmIkZTiImI0RRiImI0hZiIGE0hJiJGU4iJiNEUYiJiNIWYiBhNISYiRlOIiYjRelpdgFzK7YaWJqur8E1oLwgJsboK+1Ab8J5CrBtqaYL3VlhdhW9yFkOP3lZXYR9qA97T6aSIGE0hJiJGU4iJiNEUYiJiNIWYiBhNISYiRlOIiYjRNE7MRj6t3MLPV+a0mRbWO4Lk+DRyx81n5ncepkcP7XI7C8Y2YK9/jQCQM/ZOstNvxo2b+hNO3v7kVVZueIyDh8v52Q9WW12eBEAwtQGFmA2lJo0jd/xdrd/PmPwgC55L52//fJl7b3qa/pHxFlYngRBMbUB9YkEgvHcE6UP+A7fbTc3RSqvLEQvYuQ0oxIJE7b8bbnTfWIsrEavYtQ3odNKGzjSdoqHRhdvt6Q/Z8OFKKqp3kD4om+T4NKvLkwAIpjZg+xBzuVw899xzvPHGGzgcDuLj45k1axbPPPMMixcv5g9/+AMvvvgiixYtsrpUv3l181O8uvmpNtOmjJ7Fw7f9xqKKrNd8Hg4chcaz0KsHJPSDmAirq+o6wdQGbB1iO3fuJC8vD6fTSUREBKNGjaKmpoYVK1ZQWVlJXV0dAGPHjrW2UD+bNnEh12XOprmlif21uyjaUoCrwUHvXmGt8zz92lxa3C08Mf8vrdOOn6rj/uUZLJy+nBvHzbOidL9rOA3b9sKHFXDizFfTQ4BRSXDt1ZCeaFl5XSaY2oBt+8RcLhczZszA6XSyZMkSamtrKSsrw+l0UlBQwMaNGyktLSUkJITMzEyry/WrpLhUxqXlkp2ex5ycfH597wY+d5TywroHWud5eNZv2V21jZIdha3TXnzzITKGTjGm8V6Jow6e/yts/lfbAANwA7urYWUJrC/zPITQToKpDdg2xBYvXozD4WDRokUsX76cqKio1s/y8/PJysqiubmZlJQUoqOjLay062WkTCZ33Hy2fFrE7qoPAE/n7pLZv+eltxbhaqjhH5+t5bPKLTw6a6XF1frHkRPwuxI4fubK85aUw993dX1NVrJzG7BliJWXl1NUVERcXBzPPvtsu/OMHz8egKysrDbT9+/fzy233EJUVBQxMTH86Ec/4ujRo11ec1ebl/sEoaE9eGXTk63Trkm/ie9m3kFB4V28+MaDPDb7ZaIjBlhYpf8U7/T0f3lr8y44erLLyukW7NoGbBlihYWFtLS0MG/ePCIjI9udJzw8HGgbYidOnCAnJweHw0FhYSGrV69m69atTJ8+nZaWloDU3lWS4kaQkzWXHRXvsuuLra3TF85YTvXRCq5Jz2PiyGkWVug/Dadg1yHflnEDH+zrknK6Dbu2AVuGWElJCQA5OTmXncfhcABtQ2z16tVUV1fz1ltvMX36dGbPns3rr7/ORx99xPr167u26AC488ZfEBoSyiubv/qfOLx3BImxwxiaMMbCyvzrkypo6UAfV+kXfi+l27FjG7Dl1ckDBw4AMGTIkHY/b25uZtu2bUDbECsuLmbKlCkMHjy4ddqkSZMYNmwYGzZsYObMmR2qZ8KECTidTq/n790znNWLfD8syBp+PW8vu/xv75BvjWTTc+d9Xq83UtNSOdd8ukvW7ausGb8idcoCn5c7fgYGDU7B3dLcBVX5JtjaQEJCAtu3b+/QsrYMscbGRgBOn27/B1pUVITL5SIqKoqhQ4e2Tt+zZw+zZ8++ZP6MjAz27NnT4XqcTifV1dVezx/Wq2+Ht2WV2poazjSdsroMAIafPNHhZaurHbhbuuaX3BdqA96zZYglJCRQX19PWVkZkyZNavNZbW0tS5cuBSAzM5OQi16UV19fT//+/S9ZX2xsLJ9//nmn6vFF757hHd6WVRKvuqrbHImFNh/v0HKnjzu5KtG3fdVVgq0N+Po7cjFbhlhubi7l5eUUFBQwdepU0tI8t1mUlpYyf/58XC4XELhBrr4eJp8/F9h3Dj7/0y2dXse+vfu6zXsnG07Dr970vV/slkkJrPp3X6nV1Aa8Z8uO/fz8fAYMGMChQ4fIyMhgzJgxpKamkp2dzbBhw7jhhhuAS4dXxMTEcOzYsUvWV1dXR2ysvW6atbN+4ZA5yLdlQkJg0oiuqUe6li1DLDk5ma1btzJt2jTCwsKoqqoiNjaWVatWsXHjRvbu3QtcGmIjR45st+9rz549jBw5MiC1i3/M+DZEhl15vgtuGgOx7Y/GkW7OliEGnkAqLi7mxIkTnDhxgo8//piFCxfS2NhIVVUVoaGhjB49us0y06dP5/33328dfgHw8ccfU1lZyYwZMwL9T5BOGBAJD97gOSq7kqkZ8L3RV55Puifbhtjl7N69G7fbTWpqKn37tr0CtHDhQhITE7n11lspLi5m7dq13HnnnWRnZ3PrrbdaVLF01FUx8PObIS+z/TDLHAQP3QjTxnpOJ8VMQRdiu3Z5bpL7+qkkQHR0NCUlJSQmJjJ37lzuu+8+Jk+eTHFxMaGhQfejsoWoMPj+GHhyJjzyPejb+6vpP74OUrvHxUjpBFtenfwm3xRiAMOHD6e4uDiQJQWM48g+lhXdTUOji4iwfiyds4aUhAyrywqIHqEwNN7zLDGA0CA88rLr/g+6w4srhZidvbDuJ9w8cSFrHt/LnJzHWVZ0j9UlSQDZdf8HXYiVlJTgdruZNs28G107o/7kYfY6tpM7zvMGnGvH3M6RY4eodlVYXJkEgp33f9CFWLA6cuwQsdGJrS9ODQkJYWDMYA4fO2hxZRIIdt7/CjERMZpCLEjE9x9E3fFazp/3PKHB7XZzuP4gA/sPvsKSYgd23v8KsSAREzmQEUnjeKfsNQC27lpHXP9kkuJ0r00wsPP+D7ohFsHs0dtXsazoHgpLnqFvWDRL7/ij1SVJANl1/yvEgsiggVez4uEPrS5DLGLX/a/TSRExmkJMRIymEBMRoynERMRoCjERMZquTnZDob0gZ7HVVfgmtJfVFdiL2oD3FGLdUEgI3ealG2INtQHv6XRSRIymEBMRoynERMRoCjERMZpCTESMphATEaMpxETEaAoxETGaQkxEjKYQExGjKcRExGgKMRExmkJMRIymEBMRoynERMRoCjERMZpCTESMpie7dkNuN7Q0WV2Fb0J7eZ5GKv6hNuA9hVg31NIE762wugrf5CzW45T9SW3AezqdFBGjKcRExGgKMRExmkJMRIymEBMRo+nqpNja8dNwqM7z5+hJOHXOM/30OfioEgbFQkI/6KH/zo2lEBPbaToPnx6E9/dClav9ec6dhz9/5Pl7394wcTh8JxXiogJXp/iHQkxsw+2G7fvh/8rg5Fnvlzt1Dt4r9/z59hC4fQJEhnVdneJfCjEb+bRyCz9fmdNmWljvCJLj08gdN5+Z33mYHj3sucsbTsNfPobd1Z1bz44DsM8JP8iGsYP9U1sgBWMbsNe/RgDIGXsn2ek348ZN/Qknb3/yKis3PMbBw+X87AerrS7P75wN8Lt3PUHmDyfPwpqt8P0xcNMYM2+nCqY2oBCzodSkceSOv6v1+xmTH2TBc+n87Z8vc+9NT9M/Mt7C6vzr8HF46R04ecb/6960y/M1L9P/6+5qwdQGdE0mCIT3jiB9yH/gdrupOVppdTl+c7YJVr/XNQF2waZdnn4209m1DYCOxIJG7b8bbnTfWIsr8Z8NO8F10rdlHrsJosM9Qy/+++/eLfPGdkhNgH7hPpfYrdixDUCQHIm5XC7y8/MZMWIEYWFhDBo0iEceeYTGxkYWLFhASEgIL730ktVl+s2ZplM0NLo4dvII+2t3seKNh6io3kH6oGyS49OsLs8vKr70DKHwVXQ49O/r+eqtU+fgf//p+7asFAxt4ALbH4nt3LmTvLw8nE4nERERjBo1ipqaGlasWEFlZSV1dXUAjB071tpC/ejVzU/x6uan2kybMnoWD9/2G4sq8r8L/VWB8i8HOOog2ZCDmGBoAxfY+kjM5XIxY8YMnE4nS5Ysoba2lrKyMpxOJwUFBWzcuJHS0lJCQkLIzDSw9/Yypk1cSMH9b/P0gr9y380FRPWNxdXgoHevrwY/Pf3aXH79pzvaLHf8VB1z/jORd8v+J9Al++TLBtj3ZeC3u21f4LfZUXZvAxezdYgtXrwYh8PBokWLWL58OVFRXw3Hzs/PJysri+bmZlJSUoiOjrawUv9KiktlXFou2el5zMnJ59f3buBzRykvrHugdZ6HZ/2W3VXbKNlR2DrtxTcfImPoFG4cN8+Ksr32QYU12/1kP5wx5Gmrdm8DF7NtiJWXl1NUVERcXBzPPvtsu/OMHz8egKysrNZpF0IvOzubPn36EGLiIKGvyUiZTO64+Wz5tIjdVR8Ans7dJbN/z0tvLcLVUMM/PlvLZ5VbeHTWSourvbIKC47CwHOr0sGj1my7s+zWBi5m2xArLCykpaWFefPmERkZ2e484eGe3t2LQ6yiooJ169aRkJDANddcE5BaA2Fe7hOEhvbglU1Ptk67Jv0mvpt5BwWFd/HiGw/y2OyXiY4YYGGVV9Z0HmqPWbd9R5112+4su7SBr7NtiJWUlACQk5Nz2XkcDgfQNsSuu+46amtrWb9+Pbm5uV1bZAAlxY0gJ2suOyreZdcXW1unL5yxnOqjFVyTnsfEkdMsrNA7tcegxW3d9g8ZHGJ2aQNfZ9urkwcOHABgyJAh7X7e3NzMtm3bgLYhFhrq/1yfMGECTqfT6/l79wxn9SL/9yLfeeMveG9nIa9sfpLlD7wHeAZBJsYOY2jCmE6tOzUtlXPNfrrv5xskXJ3DlB//qd3PLowB+ybRYV99/eVtl5/vcuPI/v7OP/jF3B96WW3HBVsbSEhIYPv27R1a1rYh1tjYCMDp0+3/UIuKinC5XERFRTF06NAurcXpdFJd7f2dyWG9+nZoO1nDr+ftZZc/TBnyrZFseu58h9Z9JbU1NZxpOtUl675Y7281XPazC2PAvBEa6v28F2tqdvu0LztKbcB7tg2xhIQE6uvrKSsrY9KkSW0+q62tZenSpQBkZmZ2eed9QkKCT/P37mne0PDEq64KyJFYTL/LP/DruBebjw7zBFhLCxz/htuVLreunj3cJCUlXXlDnRRsbcDX35GL2TbEcnNzKS8vp6CggKlTp5KW5hmlXFpayvz583G5PE/LC8QgV18Pk8+fM++dg/v27gvIOwe/bIBni9v/zJvbiH55m+cI7PgZ+OWbvm9/Zt71/PlXDt8X9JHagPdsG2L5+fm8/vrrHDp0iIyMDNLT0zlz5gwVFRXk5eWRkpLCpk2b2vSHBavnf7rF6hK8Fh8NfXrC2WZrtj/IkBH7vjKpDXydba9OJicns3XrVqZNm0ZYWBhVVVXExsayatUqNm7cyN69nhvvFGJmCQ2BpBjrtj/IrNEHQcG2R2IAI0eOpLj40nOPkydPUlVVRWhoKKNHj7agMumM0cnwxZHAb7dfuLUBKu2zdYhdzu7du3G73aSlpdG376VXgdauXQvAnj172nyfkpLChAkTAleotCt7GPz1U2huCex2J6XqrUjdUVCG2K5dnkcgXO5Ucvbs2e1+f/fdd7NmzZourU2uLDIMxg4J7MMKQ0Ng0vDAbU+8pxBrh9tt4ZBw8UpeJnx2CM4FqIP/hlHQr2NDt7oNx5F9LCu6m4ZGFxFh/Vg6Zw0pCRlWl9VpQXlwfKUQk+5vQCTc8u3AbCuhn+eFIaZ7Yd1PuHniQtY8vpc5OY+zrOgeq0vyi6A8ErtwX2WwOHn6GPc/P5qzTaeJ7zeIpvNncR79ghvHz2fJ7JetLq/DJqfCnmrYU+P9MhcGsXozMBagVw/44STo2cP3+rqT+pOH2evYzn/dvxmAa8fczktvLqLaVUFS3AiLq+ucoAyxYBMZ3p8bxv6Q8D5R3DX1CUo/30RhyTNGBxh4+qnuvhZWlsB+L69WevtcffB04t97LQy2wbCKI8cOERud2PrOyZCQEAbGDObwsYPGh1hQnk4Go4qanYxI8px/7XN8woirAnQu1sX69IQHcuDqRP+vd+H1MKrr7zCSTlKIBYkvvh5iSfYIMYA+veAn18PM8Z7Tv85KS4DHp/k/GK0U338QdcdrOX/ecyXE7XZzuP4gA/sb+Jrzr1GIBQFXQzWEhBDXz3NY8YXzs04/dqW7CQ2F69Mh/2YYk9yxt3YPiIQ5E+GnN0Bs+8/RNFZM5EBGJI3jnbLXANi6ax1x/ZONP5UE9YkFhYrqHW1OHyPD+rP+w98a3yfWnvhoWPBdqG+EDys8wzC+PA6XGzUT0QeGxXsuElyd6Olns6tHb1/FsqJ7KCx5hr5h0Sy9449Wl+QXIW4Niup2THyCQc5iLHmCgTfONkN1nedFu83nPR324b0hOQZiIjp21NbV1Aa8pyMxsb0+PWHYQM8fsR/1iYmI0RRiImI0hZiIGE0hJiJG09XJbsjthpYmq6vwTWiv7nmVz1RqA95TiImI0XQ6KSJGU4iJiNEUYiJiNIWYiBhNISYiRlOIiYjRFGIiYjSFmIgYTSEmIkZTiImI0RRiImI0hZiIGE0hJiJGU4iJiNEUYiJiNIWYiBhNISYiRlOIiYjRFGIiYjSFmIgYTSEmIkZTiImI0RRiImI0hZiIGE0hJiJG+3+C9Bi8ol4g7wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 370.906x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from tensorcircuit import Circuit\n",
    "\n",
    "# the ansatz\n",
    "n_qubits = 2\n",
    "init_guess = [0, np.pi, 0, 0]\n",
    "\n",
    "\n",
    "def get_circuit(params):\n",
    "    c = Circuit(n_qubits)\n",
    "    # the ansatz body\n",
    "    c.ry(0, theta=params[0])\n",
    "    c.ry(1, theta=params[1])\n",
    "    c.cnot(0, 1)\n",
    "    c.ry(0, theta=params[2])\n",
    "    c.ry(1, theta=params[3])\n",
    "    return c\n",
    "\n",
    "\n",
    "get_circuit(init_guess).draw(output=\"mpl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fbc9f10-10d2-4be5-a8dc-b71132eb66a3",
   "metadata": {},
   "source": [
    "## Noisy simulation with the `HEA` class\n",
    "\n",
    "The rest of the workflow is similar to `UCC`: create an `HEA` instance, run the kernel and print the summary.\n",
    "\n",
    "By using the `\"tensornetwork-noise\"` engine, a depolarizing noise with probability $p=0.02$ for the CNOT gate is added\n",
    "\n",
    "$$\n",
    "\\mathcal{E}(\\rho) = (1 - p)\\rho + \\frac{p}{15} \\sum_{i} P_j \\rho P_j\n",
    "$$\n",
    "\n",
    "Here $P_j$ are two qubit Pauli matrices except $I$. An alternative form is\n",
    "\n",
    "$$\n",
    "\\mathcal{E}(\\rho) = \\frac{16p}{15} \\frac{I}{4} + (1 - \\frac{16p}{15}) \\rho\n",
    "$$\n",
    "\n",
    "When $p=0$, no error is introduced. When $p=\\frac{15}{16}$, this is a completely depolarizing channel. If $\\rho$ is a pure state, the gate fidelity is $1-\\frac{4}{5}p$,\n",
    "which is is approximately 98% if $p=0.02$.\n",
    "\n",
    "The gradient of the parameters is evaluated by the parameter-shift rule and not by auto-differentiation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8ac5b872-9e63-4698-add2-baf2ea43c8a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "############################### Circuit ###############################\n",
      "   #qubits  #gates  #CNOT  #multicontrol  depth #FLOP\n",
      "0        2       5      1              0      3    96\n",
      "######################### Optimization Result #########################\n",
      "            e: -1.1202549357480136\n",
      "          fun: array(-1.12025494)\n",
      "     hess_inv: <4x4 LbfgsInvHessProduct with dtype=float64>\n",
      "   init_guess: array([0.        , 3.14159265, 0.        , 0.        ])\n",
      "          jac: array([5.16941739e-10, 5.55111512e-17, 0.00000000e+00, 0.00000000e+00])\n",
      "      message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n",
      "         nfev: 5\n",
      "          nit: 3\n",
      "         njev: 5\n",
      "     opt_time: 0.25640320777893066\n",
      " staging_time: 1.1920928955078125e-06\n",
      "       status: 0\n",
      "      success: True\n",
      "            x: array([-2.25973122e-01,  3.14159265e+00, -6.82347069e-17,  7.19412730e-17])\n"
     ]
    }
   ],
   "source": [
    "hea = HEA(h_qubit_op, get_circuit, init_guess, engine=\"tensornetwork-noise\")\n",
    "hea.kernel()\n",
    "hea.print_summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13e86d30-4039-4479-b259-fbb40211fced",
   "metadata": {},
   "source": [
    "Different noise models can be specified using the `NoiseConf` class from TensorCircuit. Here we show a customized noise model with $p=0.25$ and gate fidelity of 80%. The energy obtained is higher than the $p=0.02$ result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b1c42f33-1ba7-435c-93ac-76db2959b42b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "############################### Circuit ###############################\n",
      "   #qubits  #gates  #CNOT  #multicontrol  depth #FLOP\n",
      "0        2       5      1              0      3    96\n",
      "######################### Optimization Result #########################\n",
      "            e: -0.9245310332616318\n",
      "          fun: array(-0.92453103)\n",
      "     hess_inv: <4x4 LbfgsInvHessProduct with dtype=float64>\n",
      "   init_guess: array([0.        , 3.14159265, 0.        , 0.        ])\n",
      "          jac: array([ 3.87354315e-10, -5.55111512e-17, -5.55111512e-17,  0.00000000e+00])\n",
      "      message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'\n",
      "         nfev: 5\n",
      "          nit: 3\n",
      "         njev: 5\n",
      "     opt_time: 0.25928783416748047\n",
      " staging_time: 9.5367431640625e-07\n",
      "       status: 0\n",
      "      success: True\n",
      "            x: array([-2.25973122e-01,  3.14159265e+00, -1.83807579e-16, -9.76918418e-17])\n"
     ]
    }
   ],
   "source": [
    "from tensorcircuit.noisemodel import NoiseConf\n",
    "from tensorcircuit.channels import isotropicdepolarizingchannel\n",
    "\n",
    "engine_conf = NoiseConf()\n",
    "# larger noise, corresponding to 80% fidelity\n",
    "channel = isotropicdepolarizingchannel(p=0.25, num_qubits=2)\n",
    "engine_conf.add_noise(\"cnot\", channel)\n",
    "\n",
    "hea = HEA(h_qubit_op, get_circuit, init_guess, engine=\"tensornetwork-noise\", engine_conf=engine_conf)\n",
    "hea.kernel()\n",
    "hea.print_summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48608036-ae47-4e77-9375-899b186ef088",
   "metadata": {},
   "source": [
    "The `\"tensornetwork-noise\"` engine does not consider measurement uncertainty. In other words, the engine assumes that infinite shots are taken for each term in the Hamiltonian.\n",
    "In order to take measurement uncertainty into account, use the `\"tensornetwork-noise&shot\"` engine. \n",
    "By default the number of shots for each term is 4096.\n",
    "Note that the engine is significantly slower to run due to the computational overhead.\n",
    "Similar to the `UCC` class, the `HEA` class supports switching engine at runtime.\n",
    "The following example shows that by increasing measurement shots the energy uncertainty is suppressed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7c21a332-926b-430c-8675-d7cdcc6fe2bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shots number: 4096\n",
      "-0.9187451689899536\n",
      "-0.9285959899718158\n",
      "-0.9285225235212169\n",
      "-0.9349106044977904\n",
      "-0.9264353453475235\n",
      "shots number: 4096 * 128\n",
      "-0.9250756148331946\n",
      "-0.9245772630966033\n",
      "-0.9238598336661094\n",
      "-0.924377692124025\n",
      "-0.923522568588401\n"
     ]
    }
   ],
   "source": [
    "# default shots is 4096\n",
    "print(\"shots number: 4096\")\n",
    "for i in range(5):\n",
    "    print(hea.energy(engine=\"tensornetwork-noise&shot\"))\n",
    "print(\"shots number: 4096 * 128\")\n",
    "hea.shots = 4096 * 128\n",
    "for i in range(5):\n",
    "    print(hea.energy(engine=\"tensornetwork-noise&shot\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93ec8bbd-d955-44cb-9419-885a5cb2e789",
   "metadata": {},
   "source": [
    "Finally, noiseless results are available by using the `\"tensornetwork\"` engine, in which case the energy is in exact agreement with the FCI energy for the hydrogen molecule system."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "093c63e4-6a5d-4cc3-8e48-965482c91a78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-1.1372744055294381, -1.1372744055294384)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hea.energy(engine=\"tensornetwork\"), uccsd.e_fci"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a58aea25-6fda-410d-ac9e-2bea15c60d4c",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Built-in ansatz, UCC ansatz and Qiskit ansatz\n",
    "TenCirChem has implemented the $R_y$ ansatz.\n",
    "We can rebuild the `HEA` instance using the `HEA.ry` function, which builds the qubit Hamiltonian and the $R_y$ ansatz automatically,\n",
    "and then run the kernel. Note that the default initial guess is randomly generated. The result is exactly the same as what we've done step by step in the above code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "89cc0336-9831-4edf-a4c5-eff91344d6ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.1202549357480136"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hea = HEA.ry(uccsd.int1e, uccsd.int2e, uccsd.n_elec, uccsd.e_core, n_layers=1, engine=\"tensornetwork-noise\")\n",
    "hea.init_guess = init_guess\n",
    "hea.kernel()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6c59f5a-0cbc-47b3-8993-899b376335e2",
   "metadata": {},
   "source": [
    "If desired, the UCC ansatz defined in the `UCC` class can be fed into the `HEA` class for noisy circuit simulation. Note that TenCirChem by default uses a multi-qubit controlled $R_y$ gate for UCC circuit simulation, which has to be decomposed into elementary gates first for actual execution on quantum computers. The gradient is turned off because parameter-shift rule is not applicable to the circuit. The energy obtained is significantly higher than HEA ansatz, because there are so many CNOT gates in the circuit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3e71b357-13bd-4356-9b65-f65575a3037c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.8208126798813514, 18)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from functools import partial\n",
    "\n",
    "get_circuit = partial(uccsd.get_circuit, decompose_multicontrol=True)\n",
    "hea = HEA(uccsd.h_qubit_op, get_circuit, uccsd.init_guess, engine=\"tensornetwork-noise\")\n",
    "hea.grad = \"free\"\n",
    "hea.kernel(), get_circuit().gate_count([\"cnot\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fec7993-23cd-4baa-8c4d-7b0e87ec8c68",
   "metadata": {},
   "source": [
    "`HEA` also directly accepts qiskit parameterized circuit as input. While qiskit offers a rich library of circuits, TenCirChem offers much faster simulation speed and friendly user interfaces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e9793a5e-551d-4701-aa0c-01266635f7dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 370.906x200.667 with 1 Axes>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from qiskit import QuantumCircuit\n",
    "from qiskit.circuit.library import TwoLocal\n",
    "\n",
    "ansatz = QuantumCircuit(2)\n",
    "ansatz = ansatz.compose(TwoLocal(2, rotation_blocks=\"ry\", entanglement_blocks=\"cx\", reps=1).decompose())\n",
    "ansatz.draw(output=\"mpl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "efd1b20d-101a-484e-be43-6f1be5e942e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.1202549357480136"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hea = HEA(h_qubit_op, ansatz, init_guess, engine=\"tensornetwork-noise\")\n",
    "hea.kernel()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef4cd7bf-2405-48d7-885a-47c698cf6d71",
   "metadata": {},
   "source": [
    "## Effect of gate noise on VQE energy\n",
    "Here we show how the CNOT depolarizing error affects the optimized VQE energy.\n",
    "If a one-layer ansatz is adopted, the energy increases linearly with the error probability up to $p=0.8$. This is a consequence of the special form of the ansatz: there's only one CNOT gate in the circuit.\n",
    "Increasing the number of layers does not lead to more accurate energy estimation. \n",
    "Rather, the noise caused by more CNOT gates deteriorates the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b39aa3a3-5d11-4685-bba2-884ae5a59c9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.445068836212158"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from tencirchem import get_noise_conf, set_backend\n",
    "\n",
    "# cnot error probabilities\n",
    "error_probs = [0.001, 0.05, 0.10, 0.20, 0.40, 0.60, 0.80]\n",
    "# number of layers in the ansatz\n",
    "n_layers = [1, 2, 3]\n",
    "e_list = []\n",
    "# record run time\n",
    "import time\n",
    "\n",
    "time1 = time.time()\n",
    "for n_layer in n_layers:\n",
    "    hea = HEA.ry(uccsd.int1e, uccsd.int2e, uccsd.n_elec, uccsd.e_core, n_layers=n_layer, engine=\"tensornetwork-noise\")\n",
    "    # set HF init state\n",
    "    hea.init_guess = np.zeros_like(hea.init_guess)\n",
    "    hea.init_guess[1] = np.pi\n",
    "    for error_prob in error_probs:\n",
    "        hea.engine_conf = get_noise_conf(error_prob)\n",
    "        e = hea.kernel()\n",
    "        e_list.append(e)\n",
    "e_array = np.array(e_list).reshape(3, -1)\n",
    "time.time() - time1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "51e17cb8-3690-4f8a-87f4-0c58dcfe8a6c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "import mpl_config\n",
    "\n",
    "\n",
    "plt.plot(error_probs, e_array[0], marker=\"o\", linestyle=\"--\", label=\"Noisy 1-layer\")\n",
    "plt.plot(error_probs, e_array[1], marker=\"s\", linestyle=\"--\", label=\"Noisy 2-layer\")\n",
    "plt.plot(error_probs, e_array[2], marker=\"d\", linestyle=\"--\", label=\"Noisy 3-layer\")\n",
    "plt.plot(error_probs, [uccsd.e_fci] * len(error_probs), linestyle=\"--\", label=\"FCI\")\n",
    "\n",
    "plt.xlabel(\"CNOT error probability $p$\")\n",
    "plt.ylabel(\"$E$ (Hartree)\")\n",
    "plt.legend(loc=(1, 0.5))\n",
    "plt.savefig(\"error-probability.pdf\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fd7b167-5c84-4025-b481-fc6991d921a2",
   "metadata": {},
   "source": [
    "## Effect of measurement shots on VQE energy uncertainty\n",
    "Here we show how measurement shots affect the standard deviation of the optimized VQE energy.\n",
    "As expected, the standard deviation is in linear relation with $\\sqrt{\\frac{1}{N}}$.\n",
    "In general, increasing $p$ causes a larger standard deviation of the energy, yet the effect is far less significant than adjusting $N$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aefacfff-3d2f-4082-a295-17b96f8fa6b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11.673604011535645"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hea = HEA.ry(uccsd.int1e, uccsd.int2e, uccsd.n_elec, uccsd.e_core, n_layers=1, engine=\"tensornetwork-noise\")\n",
    "hea.kernel()\n",
    "# cnot error probabilities\n",
    "error_probs = [0.10, 0.20, 0.40]\n",
    "# number of measurement shots\n",
    "shots_list = [2**i for i in range(8, 14)]\n",
    "e_list = []\n",
    "# record run time\n",
    "time1 = time.time()\n",
    "for error_prob in error_probs:\n",
    "    for shots in shots_list:\n",
    "        hea.engine_conf = get_noise_conf(error_prob)\n",
    "        hea.shots = shots\n",
    "        e = []\n",
    "        for i in range(64):\n",
    "            e.append(hea.energy(engine=\"tensornetwork-noise&shot\"))\n",
    "        e_list.append(e)\n",
    "e_array = np.array(e_list).reshape(len(error_probs), -1, 64)\n",
    "time.time() - time1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f2ecbfce-1205-49d8-95df-83c85cf90e08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.array(shots_list) ** (-0.5), e_array.std(axis=2)[0], marker=\"o\", label=\"$p=0.10$\", linestyle=\"--\")\n",
    "plt.plot(np.array(shots_list) ** (-0.5), e_array.std(axis=2)[1], marker=\"s\", label=\"$p=0.20$\", linestyle=\"--\")\n",
    "plt.plot(np.array(shots_list) ** (-0.5), e_array.std(axis=2)[2], marker=\"d\", label=\"$p=0.40$\", linestyle=\"--\")\n",
    "plt.xlabel(r\"$\\sqrt{1 / N_{\\rm{shots}}}$\")\n",
    "plt.ylabel(r\"$\\sqrt{\\textrm{Var}(E)}$ (Hartree)\")\n",
    "plt.legend()\n",
    "plt.savefig(\"uncertainty.pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f8279834-6f87-456c-a1db-7caf482b237a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}