{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ce0e891d-f149-4005-9dc3-524bd9c8c047",
   "metadata": {},
   "source": [
    "# Variational Basis State Encoder (Ground State)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ceab38a",
   "metadata": {},
   "source": [
    "## 1 Backgroud\n",
    "This tutorial is for variational basis state encoder (VBE) for the ground state of the Holstein model.\n",
    "\n",
    "$$ \\hat{H} = -\\sum_{i,j} V \\hat{a}_i^\\dagger \\hat{a}_j + \\sum_i \\omega \\hat{b}_i^\\dagger \\hat{b}_i + \\sum_i g\\omega \\hat{a} _i^\\dagger \\hat{a}_i (\\hat{b}_i^\\dagger + \\hat{b}_i) $$\n",
    "\n",
    "To calculate the ground state of Holstein model accurately, many levels of phonons are needed, which will cost too many qubits in quantum circuit. There exists another idea that we can view linear conbination of phonons as an effective phonon mode, which is possible to save the qubits in phonon encoding:\n",
    "\n",
    "$$\\hat{B}[l]=\\sum_{n=1}^{2^{N_l}} \\ket{n}_l\\sum_m C[l]_{mn} \\bra{m}_l$$\n",
    "\n",
    "Here, we transform the original phonon basis $\\ket{m}$ to the encoded basis $\\ket{n}$, via transformation operator $\\hat{B}[l]$. The form of $\\hat{B}[l]$ is the central of VBE and the algorithm are presented in section 2. For more details, see https://doi.org/10.1103/PhysRevResearch.5.023046"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "420ea9d3",
   "metadata": {},
   "source": [
    "## 2 Algorithm Realization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af57906d",
   "metadata": {},
   "source": [
    "### 2.1 Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd24d246",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy\n",
    "from opt_einsum import contract\n",
    "import tensorcircuit as tc\n",
    "\n",
    "from tencirchem import set_backend, Op, BasisSHO, BasisSimpleElectron, Mpo, Model\n",
    "from tencirchem.dynamic import get_ansatz, qubit_encode_op, qubit_encode_basis\n",
    "from tencirchem.utils import scipy_opt_wrap\n",
    "from tencirchem.applications.vbe_lib import get_psi_indices, get_contracted_mpo, get_contract_args"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b29e1ed",
   "metadata": {},
   "source": [
    "## 2.2 Initial setups\n",
    "In this section, we set intital parameters for coming sections. Here, `JAX` is used as backend. `nsite`, `omega`, `v` correspond to the site number, phonon frequency $\\omega$, transfer intergral $V$ in Holstein model, respectively:\n",
    "\n",
    "$$ \\hat{H} = -\\sum_{i,j} V \\hat{a}_i^\\dagger \\hat{a}_j + \\sum_i \\omega \\hat{b}_i^\\dagger \\hat{b}_i + \\sum_i g\\omega \\hat{a} _i^\\dagger \\hat{a}_i (\\hat{b}_i^\\dagger + \\hat{b}_i) $$\n",
    "\n",
    "Each site possesses one phonon mode, which is represented by 2 qubit per phonon (see `n_qubit_per_mode`). Considering gray encoding is adopted, the number of phonon basis (`nbas_v`) is $2^2$. `psi_index_top` and `psi_index_bottom` correspond to the physical index of ket and bra, `b_dof_vidx` correspond to the qubits that need VBE, `psi_shape2` is the physical bond dimension of each qubit state.\n",
    "The stucture of wavefunction and operator are presented in Fig.1. Note that the related arguments and functions are also marked.\n",
    "![fig1](../statics/vbe_gs_Fig1.svg)\n",
    "Fig. 1 The structure of wavefunction and operator. Blue squares correspond to qubit representing spin, green circles correspond to qubits representing vibrations, purple circles correspond to $B[l]$, and orange squares correspond to Matrix Product Operators (MPO)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37646a1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-08-08 15:44:36.794994: E external/org_tensorflow/tensorflow/compiler/xla/stream_executor/cuda/cuda_driver.cc:267] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n",
      "WARNING:jax._src.lib.xla_bridge:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "psi_index_top:  ['p-0-bottom', 'v-1-0-bottom', 'v-1-1-bottom', 'p-2-bottom', 'v-3-0-bottom', 'v-3-1-bottom', 'p-4-bottom', 'v-5-0-bottom', 'v-5-1-bottom'] \n",
      " psi_index_bottom:  ['p-0-bottom', 'v-1-0-bottom', 'v-1-1-bottom', 'p-2-bottom', 'v-3-0-bottom', 'v-3-1-bottom', 'p-4-bottom', 'v-5-0-bottom', 'v-5-1-bottom'] \n",
      " b_dof_vidx:  [array([1, 2]), array([4, 5]), array([7, 8])] \n",
      " psi_shape2:  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
     ]
    }
   ],
   "source": [
    "backend = set_backend(\"jax\")\n",
    "\n",
    "nsite = 3\n",
    "omega = 1\n",
    "v = 1\n",
    "# two qubit for each mode\n",
    "# modify param_ids before modifying this\n",
    "n_qubit_per_mode = 2\n",
    "nbas_v = 1 << n_qubit_per_mode\n",
    "\n",
    "# -1 for electron dof, natural numbers for phonon dof\n",
    "dof_nature = np.array([-1, 0, 0, -1, 1, 1, -1, 2, 2])\n",
    "# physical index for phonon mode\n",
    "b_dof_pidx = np.array([1, 3, 5])\n",
    "\n",
    "psi_idx_top, psi_idx_bottom, b_dof_vidx = get_psi_indices(dof_nature, b_dof_pidx, n_qubit_per_mode)\n",
    "\n",
    "n_dof = len(dof_nature)\n",
    "psi_shape2 = [2] * n_dof\n",
    "\n",
    "print(\n",
    "    \"psi_index_top: \",\n",
    "    psi_idx_bottom,\n",
    "    \"\\n psi_index_bottom: \",\n",
    "    psi_idx_bottom,\n",
    "    \"\\n b_dof_vidx: \",\n",
    "    b_dof_vidx,\n",
    "    \"\\n psi_shape2: \",\n",
    "    psi_shape2,\n",
    ")\n",
    "\n",
    "c = tc.Circuit(nsite * 3)  # generate quantum circuit\n",
    "c.X(0)  # prepare one-electron initial state\n",
    "n_layers = 3  # layers of ansatz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9df7f0b5",
   "metadata": {},
   "source": [
    "## 2.3 Get Variational Hamiltonian Ansatz (VHA) Terms\n",
    "In this section, we will generate variational hamiltonian ansatz terms. The following ansatz is adopted:\n",
    "\n",
    "$$\\ket{\\phi}=\\prod_l^L {\\prod_{<j,k>} e^{\\theta_{ijk} {(\\hat{a}_j^\\dagger \\hat{a}_k - \\hat{a}_k^\\dagger \\hat{a}_j)}} \n",
    "\\prod_j {e^{\\theta_{lj}\\hat{a}_j^\\dagger \\hat{a}_j (\\hat{b}_j^\\dagger - \\hat{b}_j)}}} \\ket{\\phi_0} $$\n",
    "\n",
    "The anasatz is transformed from electron-phonon basis to qubit basis through `qubit_encode_op()` and `qubit_encode_basis()`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "aa59a6bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ansatz_terms: \n",
      " [Op('X Y', [0, 1], 0.5j), Op('Y X', [0, 1], -0.5j), Op('Y', [((0, 0), 'TCCQUBIT-1')], 0.1830127018922193j), Op('Z Y', [((0, 0), 'TCCQUBIT-0'), ((0, 0), 'TCCQUBIT-1')], -0.6830127018922193j), Op('Y', [((0, 0), 'TCCQUBIT-0')], -0.3535533905932738j), Op('Y Z', [((0, 0), 'TCCQUBIT-0'), ((0, 0), 'TCCQUBIT-1')], 0.3535533905932738j), Op('Z Y', [0, ((0, 0), 'TCCQUBIT-1')], -0.1830127018922193j), Op('Z Z Y', [0, ((0, 0), 'TCCQUBIT-0'), ((0, 0), 'TCCQUBIT-1')], 0.6830127018922193j), Op('Z Y', [0, ((0, 0), 'TCCQUBIT-0')], 0.3535533905932738j), Op('Z Y Z', [0, ((0, 0), 'TCCQUBIT-0'), ((0, 0), 'TCCQUBIT-1')], -0.3535533905932738j), Op('X Y', [1, 2], 0.5j), Op('Y X', [1, 2], -0.5j), Op('Y', [((1, 0), 'TCCQUBIT-1')], 0.1830127018922193j), Op('Z Y', [((1, 0), 'TCCQUBIT-0'), ((1, 0), 'TCCQUBIT-1')], -0.6830127018922193j), Op('Y', [((1, 0), 'TCCQUBIT-0')], -0.3535533905932738j), Op('Y Z', [((1, 0), 'TCCQUBIT-0'), ((1, 0), 'TCCQUBIT-1')], 0.3535533905932738j), Op('Z Y', [1, ((1, 0), 'TCCQUBIT-1')], -0.1830127018922193j), Op('Z Z Y', [1, ((1, 0), 'TCCQUBIT-0'), ((1, 0), 'TCCQUBIT-1')], 0.6830127018922193j), Op('Z Y', [1, ((1, 0), 'TCCQUBIT-0')], 0.3535533905932738j), Op('Z Y Z', [1, ((1, 0), 'TCCQUBIT-0'), ((1, 0), 'TCCQUBIT-1')], -0.3535533905932738j), Op('X Y', [0, 2], -0.5j), Op('Y X', [0, 2], 0.5j), Op('Y', [((2, 0), 'TCCQUBIT-1')], 0.1830127018922193j), Op('Z Y', [((2, 0), 'TCCQUBIT-0'), ((2, 0), 'TCCQUBIT-1')], -0.6830127018922193j), Op('Y', [((2, 0), 'TCCQUBIT-0')], -0.3535533905932738j), Op('Y Z', [((2, 0), 'TCCQUBIT-0'), ((2, 0), 'TCCQUBIT-1')], 0.3535533905932738j), Op('Z Y', [2, ((2, 0), 'TCCQUBIT-1')], -0.1830127018922193j), Op('Z Z Y', [2, ((2, 0), 'TCCQUBIT-0'), ((2, 0), 'TCCQUBIT-1')], 0.6830127018922193j), Op('Z Y', [2, ((2, 0), 'TCCQUBIT-0')], 0.3535533905932738j), Op('Z Y Z', [2, ((2, 0), 'TCCQUBIT-0'), ((2, 0), 'TCCQUBIT-1')], -0.3535533905932738j)] \n",
      "spin_basis: \n",
      " [BasisHalfSpin(dof: 0, nbas: 2), BasisHalfSpin(dof: ((0, 0), 'TCCQUBIT-0'), nbas: 2), BasisHalfSpin(dof: ((0, 0), 'TCCQUBIT-1'), nbas: 2), BasisHalfSpin(dof: 1, nbas: 2), BasisHalfSpin(dof: ((1, 0), 'TCCQUBIT-0'), nbas: 2), BasisHalfSpin(dof: ((1, 0), 'TCCQUBIT-1'), nbas: 2), BasisHalfSpin(dof: 2, nbas: 2), BasisHalfSpin(dof: ((2, 0), 'TCCQUBIT-0'), nbas: 2), BasisHalfSpin(dof: ((2, 0), 'TCCQUBIT-1'), nbas: 2)] \n",
      "param_ids: \n",
      " [1, -1, 0, 2, 3, 4, 5, 6, 7, 8, 9, -9, 10, 11, 12, 13, 14, 15, 16, 17, 18, -18, 19, 20, 21, 22, 23, 24, 25, 26] \n",
      "ansatz: \n",
      " <function get_ansatz.<locals>.ansatz at 0x7f2fd4ed29e0>\n"
     ]
    }
   ],
   "source": [
    "def get_vha_terms():\n",
    "    # variational Hamiltonian ansatz (vha) terms\n",
    "\n",
    "    g = 1  # dummy value, doesn't matter\n",
    "    ansatz_terms = []\n",
    "    for i in range(nsite):\n",
    "        j = (i + 1) % nsite\n",
    "        ansatz_terms.append(Op(r\"a^\\dagger a\", [i, j], v))\n",
    "        ansatz_terms.append(Op(r\"a^\\dagger a\", [j, i], -v))\n",
    "        ansatz_terms.append(Op(r\"a^\\dagger a b^\\dagger-b\", [i, i, (i, 0)], g * omega))\n",
    "\n",
    "    basis = []\n",
    "    for i in range(nsite):\n",
    "        basis.append(BasisSimpleElectron(i))\n",
    "        basis.append(BasisSHO((i, 0), omega, nbas_v))\n",
    "\n",
    "    ansatz_terms, _ = qubit_encode_op(ansatz_terms, basis, boson_encoding=\"gray\")\n",
    "    spin_basis = qubit_encode_basis(basis, boson_encoding=\"gray\")\n",
    "    # this is currently hard-coded for `n_qubit_per_mode==2`\n",
    "    # if the values of param_ids are opposite to each other, the values of the parameters are forced to be opposite in the optimization.\n",
    "    param_ids = [1, -1, 0, 2, 3, 4, 5, 6, 7, 8] + [9, -9] + list(range(10, 18)) + [18, -18] + list(range(19, 27))\n",
    "    return ansatz_terms, spin_basis, param_ids\n",
    "\n",
    "\n",
    "ansatz_terms, spin_basis, param_ids = get_vha_terms()\n",
    "ansatz = get_ansatz(ansatz_terms, spin_basis, n_layers, c, param_ids)\n",
    "\n",
    "print(\n",
    "    \"ansatz_terms: \\n\",\n",
    "    ansatz_terms,\n",
    "    \"\\nspin_basis: \\n\",\n",
    "    spin_basis,\n",
    "    \"\\nparam_ids: \\n\",\n",
    "    param_ids,\n",
    "    \"\\nansatz: \\n\",\n",
    "    ansatz,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ecd5d1a",
   "metadata": {},
   "source": [
    "## 2.4 Cost Functions for VQE Part\n",
    "The VQE parameters $\\theta_k$ are optimized via following equation:\n",
    "\n",
    "$$\\partial {\\bra{\\phi}\\hat{H}_1\\ket{\\phi}}/\\partial {\\theta_k} = 0$$\n",
    "\n",
    "where\n",
    "\n",
    "$$\\hat{H}_1=\\prod_{l}\\hat{B}[l] \\hat{H} \\prod_{l}\\hat{B}[l]^\\dagger$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16f66ff0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cost_fn(params, h):\n",
    "    state = ansatz(params)\n",
    "    return (state.conj() @ (h @ state)).squeeze().real\n",
    "\n",
    "\n",
    "vg = backend.jit(backend.value_and_grad(cost_fn))\n",
    "opt_fn = scipy_opt_wrap(vg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80df3090",
   "metadata": {},
   "source": [
    "## 2.5 Get Hamiltonian Terms and Basis\n",
    "In this section, we generate the operator of the Holstein Hamiltonian presented in Section 2.2. The format of the operator are shown in Fig. 1. Note that the number of phonon levels are controlled by `nbas`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "93d727ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_ham_terms_and_basis(g, nbas):\n",
    "    terms = []\n",
    "    for i in range(nsite):\n",
    "        terms.append(Op(r\"b^\\dagger b\", (i, 0), omega))\n",
    "        terms.append(Op(r\"a^\\dagger a b^\\dagger+b\", [i, i, (i, 0)], g * omega))\n",
    "        j = (i + 1) % nsite\n",
    "        terms.append(Op(r\"a^\\dagger a\", [i, j], -v))\n",
    "        terms.append(Op(r\"a^\\dagger a\", [j, i], -v))\n",
    "\n",
    "    basis = []\n",
    "    for i in range(nsite):\n",
    "        basis.append(BasisSimpleElectron(i))\n",
    "        basis.append(BasisSHO((i, 0), omega, nbas))\n",
    "\n",
    "    return terms, basis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d065fcd",
   "metadata": {},
   "source": [
    "## 2.6 Update $B[l]$ in Iteration\n",
    "In this section, the function that calculates $B[l]$ are defined:\n",
    "\n",
    "$$(1-\\hat{P}[l])\\bra{\\phi}\\tilde{H'}\\ket{\\phi}=0$$\n",
    "\n",
    "where\n",
    "\n",
    "$$\\hat{P}[l]=\\hat{B}[l]^\\dagger\\hat{B}[l]$$\n",
    "\n",
    "and\n",
    "\n",
    "$$\\tilde{H'}=\\hat{H}_{contracted}\\hat{B}[l]^\\dagger=\\left( \\prod_{k\\neq l}\\hat{B}[l] \\hat{H} \\prod_{k\\neq l}\\hat{B}[k]^\\dagger \\right) \\hat{B}[l]^\\dagger$$\n",
    "\n",
    "The graphic representarion of `h_contracted` is presented in Fig. 2. Obiviously, if $\\hat{H}$ are provided, we can obtain $\\hat{B}[l]$ by solving the equation mentioned above. Considering this is a non-linear equation, several initial guesses are needed to avoid local minimum, which is controlled by `nroot`.\n",
    "![fig2](../statics/vbe_gs_Fig2.svg)\n",
    "Fig. 2 Graphic representation of `h_contracted`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8ee8576c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def solve_b_array(psi, h_mpo, b_array, i):\n",
    "    nbas = b_array.shape[-1]\n",
    "    # get the input of tensor contraction function `contract`\n",
    "    args = get_contract_args(psi, h_mpo, b_array, i, n_qubit_per_mode, psi_idx_top, psi_idx_bottom, b_dof_pidx)\n",
    "    k = b_dof_pidx[i]\n",
    "    # output indices\n",
    "    args.append(\n",
    "        [\n",
    "            f\"v-{k}-0-bottom\",\n",
    "            f\"v-{k}-1-bottom\",\n",
    "            f\"p-{k}-bottom\",\n",
    "            f\"v-{k}-0-top\",\n",
    "            f\"v-{k}-1-top\",\n",
    "            f\"p-{k}-top\",\n",
    "            \"mpo-0\",\n",
    "            f\"mpo-{len(h_mpo)}\",\n",
    "        ]\n",
    "    )\n",
    "    # get contracted_h and reshape the dofs named v-{k}-0-bottom(top) and v-{k}-1-bottom(top) to one dof with dimension 4\n",
    "    contracted_h = contract(*args).reshape(4, nbas, 4, nbas)\n",
    "    nroot = 3\n",
    "\n",
    "    def f(x):\n",
    "        x = x.reshape(nroot, 4, nbas)\n",
    "        # calculate P[l]\n",
    "        p = contract(\"abc, abd -> acd\", x.conj(), x)\n",
    "        return contract(\"abcd, kab, kde -> kce\", contracted_h, x, (np.array([np.eye(nbas)] * nroot) - p)).ravel()\n",
    "\n",
    "    # solve the equation mentioned above to obtain B[l]\n",
    "    sols = scipy.optimize.root(f, [b_array[i].flatten()] * nroot, method=\"df-sane\").x.reshape(3, 4, nbas)\n",
    "\n",
    "    sols = list(sols) + [b_array[i].copy()]\n",
    "    b_array = b_array.copy()\n",
    "    es = []\n",
    "    for k, new_b in enumerate(sols):\n",
    "        # ensure the orthomormal constraint of B[l]\n",
    "        if not np.allclose(new_b @ new_b.T, np.eye(4)):\n",
    "            # print(f\"Enforcing orthogonality for the {k}th root of b_array[{i}]\")\n",
    "            new_b = np.linalg.qr(new_b.T)[0].T\n",
    "        b_array[i] = new_b\n",
    "        e = psi @ get_contracted_mpo(h_mpo, b_array, n_qubit_per_mode, b_dof_pidx, psi_idx_top + psi_idx_bottom) @ psi\n",
    "        es.append(e)\n",
    "    # print(np.array(es))\n",
    "    lowest_id = np.argmin(es)\n",
    "    return sols[lowest_id]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "859c6642",
   "metadata": {},
   "source": [
    "## 2.7 Main Structure of the Function\n",
    "This section is the main part of the funtion. The codes contain following parts:\n",
    "(i) Initialize the parameters and functions, some initializations are also preformed in section 2.2\n",
    "(ii) Search for ground state, where $\\theta_k$ are updated via VQE and $B[l]$ are calculated via functions in Section 2.6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9da5b86b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "g: 1.5, nbas: 4\n",
      "Iter 0 VQE energy: -3.1462862688238387\n",
      "Iter 1 VQE energy: -3.1467101393155392\n",
      "Iter 2 VQE energy: -3.1516072207104755\n",
      "Iter 3 VQE energy: -3.146809472707097\n",
      "Iter 4 VQE energy: -3.1436199703762058\n",
      "Iter 5 VQE energy: -3.1436211792549265\n",
      "Iter 6 VQE energy: -3.1436161320531255\n",
      "Iter 7 VQE energy: -3.1436163145946456\n",
      "Iter 8 VQE energy: -3.143610688816215\n",
      "Iter 9 VQE energy: -3.143615904093609\n",
      "g: 1.5, nbas: 8\n",
      "Iter 0 VQE energy: -3.143618182488605\n",
      "Iter 1 VQE energy: -3.200840457440427\n",
      "Iter 2 VQE energy: -3.2122982581916806\n",
      "Iter 3 VQE energy: -3.2148415941913107\n",
      "Iter 4 VQE energy: -3.214454540682066\n",
      "Iter 5 VQE energy: -3.214612010154128\n",
      "Iter 6 VQE energy: -3.2147110746262615\n",
      "Iter 7 VQE energy: -3.2147665497225395\n",
      "Iter 8 VQE energy: -3.2148131940534586\n",
      "Iter 9 VQE energy: -3.2154252365889784\n",
      "g: 1.5, nbas: 12\n",
      "Iter 0 VQE energy: -3.1514261568965116\n",
      "Iter 1 VQE energy: -3.207712921399021\n",
      "Iter 2 VQE energy: -3.2143507766993564\n",
      "Iter 3 VQE energy: -3.2151165867343625\n",
      "Iter 4 VQE energy: -3.215551620056812\n",
      "Iter 5 VQE energy: -3.21568849222177\n",
      "Iter 6 VQE energy: -3.215871719331443\n",
      "Iter 7 VQE energy: -3.215941510624362\n",
      "Iter 8 VQE energy: -3.2160628060732046\n",
      "Iter 9 VQE energy: -3.216149074896171\n",
      "g: 1.5, nbas: 16\n",
      "Iter 0 VQE energy: -3.1514406055444124\n",
      "Iter 1 VQE energy: -3.2076420281600306\n",
      "Iter 2 VQE energy: -3.2142584040499904\n",
      "Iter 3 VQE energy: -3.215027472815238\n",
      "Iter 4 VQE energy: -3.215298468441994\n",
      "Iter 5 VQE energy: -3.215473370191188\n",
      "Iter 6 VQE energy: -3.215603547226202\n",
      "Iter 7 VQE energy: -3.2157277687243084\n",
      "Iter 8 VQE energy: -3.21585866940053\n",
      "Iter 9 VQE energy: -3.215945718302776\n",
      "g: 1.5, nbas: 20\n",
      "Iter 0 VQE energy: -3.1514390786099793\n",
      "Iter 1 VQE energy: -3.207490813088342\n",
      "Iter 2 VQE energy: -3.214102161196929\n",
      "Iter 3 VQE energy: -3.2148182787029125\n",
      "Iter 4 VQE energy: -3.215041112156586\n",
      "Iter 5 VQE energy: -3.2151813495719064\n",
      "Iter 6 VQE energy: -3.2153433350190888\n",
      "Iter 7 VQE energy: -3.215488882659097\n",
      "Iter 8 VQE energy: -3.2156246556276216\n",
      "Iter 9 VQE energy: -3.2157174737499026\n",
      "g: 1.5, nbas: 24\n",
      "Iter 0 VQE energy: -3.1514387774077157\n",
      "Iter 1 VQE energy: -3.207367390115564\n",
      "Iter 2 VQE energy: -3.2139409419868894\n",
      "Iter 3 VQE energy: -3.214681092894311\n",
      "Iter 4 VQE energy: -3.2148647347163752\n",
      "Iter 5 VQE energy: -3.2149976397508198\n",
      "Iter 6 VQE energy: -3.2150898148896068\n",
      "Iter 7 VQE energy: -3.215209498240965\n",
      "Iter 8 VQE energy: -3.215350330348768\n",
      "Iter 9 VQE energy: -3.215489480343017\n",
      "g: 1.5, nbas: 28\n",
      "Iter 0 VQE energy: -3.151439525393469\n",
      "Iter 1 VQE energy: -3.2073726435058725\n",
      "Iter 2 VQE energy: -3.21394347501351\n",
      "Iter 3 VQE energy: -3.2146357208139835\n",
      "Iter 4 VQE energy: -3.2147953021340396\n",
      "Iter 5 VQE energy: -3.2149183613661005\n",
      "Iter 6 VQE energy: -3.2150120210391324\n",
      "Iter 7 VQE energy: -3.2151326321686358\n",
      "Iter 8 VQE energy: -3.2152609684807225\n",
      "Iter 9 VQE energy: -3.2153772130446274\n",
      "g: 1.5, nbas: 32\n",
      "Iter 0 VQE energy: -3.1514407536942515\n",
      "Iter 1 VQE energy: -3.2073747584311443\n",
      "Iter 2 VQE energy: -3.213913960989289\n",
      "Iter 3 VQE energy: -3.214575999427622\n",
      "Iter 4 VQE energy: -3.2147908760265476\n",
      "Iter 5 VQE energy: -3.214908337484859\n",
      "Iter 6 VQE energy: -3.214995903540079\n",
      "Iter 7 VQE energy: -3.2151048002575178\n",
      "Iter 8 VQE energy: -3.2151780903906246\n",
      "Iter 9 VQE energy: -3.215267190685132\n",
      "[array(-3.1436159), array(-3.21542524), array(-3.21614907), array(-3.21594572), array(-3.21571747), array(-3.21548948), array(-3.21537721), array(-3.21526719)]\n",
      "g: 3, nbas: 4\n",
      "Iter 0 VQE energy: -5.970388609022889\n",
      "Iter 1 VQE energy: -5.970388750660544\n",
      "Iter 2 VQE energy: -5.970380747881972\n",
      "Iter 3 VQE energy: -5.9703823363984405\n",
      "Iter 4 VQE energy: -5.970361506210726\n",
      "Iter 5 VQE energy: -5.970387322685639\n",
      "Iter 6 VQE energy: -5.970395203902614\n",
      "Iter 7 VQE energy: -5.970391647335198\n",
      "Iter 8 VQE energy: -5.970399166505385\n",
      "Iter 9 VQE energy: -5.970381692433662\n",
      "g: 3, nbas: 8\n",
      "Iter 0 VQE energy: -5.97038378078057\n",
      "Iter 1 VQE energy: -7.5564103165274705\n",
      "Iter 2 VQE energy: -7.867598000881585\n",
      "Iter 3 VQE energy: -7.886883542215796\n",
      "Iter 4 VQE energy: -7.8885422575017525\n",
      "Iter 5 VQE energy: -7.88860270448971\n",
      "Iter 6 VQE energy: -7.888976697629529\n",
      "Iter 7 VQE energy: -7.889032282397925\n",
      "Iter 8 VQE energy: -7.87508588628647\n",
      "Iter 9 VQE energy: -7.88070265416792\n",
      "g: 3, nbas: 12\n",
      "Iter 0 VQE energy: -5.97067566818566\n",
      "Iter 1 VQE energy: -8.243806185428152\n",
      "Iter 2 VQE energy: -8.734803721364637\n",
      "Iter 3 VQE energy: -8.761741304437681\n",
      "Iter 4 VQE energy: -8.763332322992516\n",
      "Iter 5 VQE energy: -8.763771458365108\n",
      "Iter 6 VQE energy: -8.764185047602272\n",
      "Iter 7 VQE energy: -8.764384932213805\n",
      "Iter 8 VQE energy: -8.76466850977698\n",
      "Iter 9 VQE energy: -8.764911481717341\n",
      "g: 3, nbas: 16\n",
      "Iter 0 VQE energy: -5.96862038743091\n",
      "Iter 1 VQE energy: -8.429794930919833\n",
      "Iter 2 VQE energy: -9.026873692202507\n",
      "Iter 3 VQE energy: -9.056442107809515\n",
      "Iter 4 VQE energy: -9.05694061960338\n",
      "Iter 5 VQE energy: -9.057045669005818\n",
      "Iter 6 VQE energy: -9.057238086937822\n",
      "Iter 7 VQE energy: -9.057282106387905\n",
      "Iter 8 VQE energy: -9.057566284361702\n",
      "Iter 9 VQE energy: -9.057828042375913\n",
      "g: 3, nbas: 20\n",
      "Iter 0 VQE energy: -5.970618486961766\n",
      "Iter 1 VQE energy: -8.46027786865908\n",
      "Iter 2 VQE energy: -9.083147656265663\n",
      "Iter 3 VQE energy: -9.114099808352503\n",
      "Iter 4 VQE energy: -9.11560775880261\n",
      "Iter 5 VQE energy: -9.115877265080734\n",
      "Iter 6 VQE energy: -9.116097672280478\n",
      "Iter 7 VQE energy: -9.116229576435904\n",
      "Iter 8 VQE energy: -9.116393057481334\n",
      "Iter 9 VQE energy: -9.116547264265742\n",
      "g: 3, nbas: 24\n",
      "Iter 0 VQE energy: -5.970625270862546\n",
      "Iter 1 VQE energy: -8.45711233270321\n",
      "Iter 2 VQE energy: -9.088394950174024\n",
      "Iter 3 VQE energy: -9.119585611496353\n",
      "Iter 4 VQE energy: -9.120622157156225\n",
      "Iter 5 VQE energy: -9.12076874586676\n",
      "Iter 6 VQE energy: -9.120868946965105\n",
      "Iter 7 VQE energy: -9.120961208842665\n",
      "Iter 8 VQE energy: -9.121266704999321\n",
      "Iter 9 VQE energy: -9.121400092721187\n",
      "g: 3, nbas: 28\n",
      "Iter 0 VQE energy: -5.970428599007128\n",
      "Iter 1 VQE energy: -8.457873653767907\n",
      "Iter 2 VQE energy: -9.080983847442083\n",
      "Iter 3 VQE energy: -9.11887015866691\n",
      "Iter 4 VQE energy: -9.120581625216305\n",
      "Iter 5 VQE energy: -9.120780165844552\n",
      "Iter 6 VQE energy: -9.120861448711434\n",
      "Iter 7 VQE energy: -9.120944883939789\n",
      "Iter 8 VQE energy: -9.121064294222425\n",
      "Iter 9 VQE energy: -9.121158073032065\n",
      "g: 3, nbas: 32\n",
      "Iter 0 VQE energy: -5.969871735326939\n",
      "Iter 1 VQE energy: -8.45468700588645\n",
      "Iter 2 VQE energy: -9.081070798150298\n",
      "Iter 3 VQE energy: -9.11871782591465\n",
      "Iter 4 VQE energy: -9.120482174048545\n",
      "Iter 5 VQE energy: -9.1206758213174\n",
      "Iter 6 VQE energy: -9.12076495864178\n",
      "Iter 7 VQE energy: -9.12087305152589\n",
      "Iter 8 VQE energy: -9.120974560170358\n",
      "Iter 9 VQE energy: -9.121128971234404\n",
      "[array(-3.1436159), array(-3.21542524), array(-3.21614907), array(-3.21594572), array(-3.21571747), array(-3.21548948), array(-3.21537721), array(-3.21526719), array(-5.97038169), array(-7.88070265), array(-8.76491148), array(-9.05782804), array(-9.11654726), array(-9.12140009), array(-9.12115807), array(-9.12112897)]\n"
     ]
    }
   ],
   "source": [
    "vqe_e = []\n",
    "thetas = np.zeros((max(param_ids) + 1) * n_layers)\n",
    "\n",
    "for g in [1.5, 3]:\n",
    "    for nbas in [4, 8, 12, 16, 20, 24, 28, 32]:\n",
    "        print(f\"g: {g}, nbas: {nbas}\")\n",
    "\n",
    "        # take gray encoding as an initial guess for `b_array`\n",
    "        b_list = []\n",
    "        for i in range(max(dof_nature) + 1):\n",
    "            b = np.eye(nbas)[:nbas_v]  # nbas_dummy * nbas\n",
    "            b_list.append(b)\n",
    "        b_array = np.array(b_list)\n",
    "\n",
    "        # initialize, get hamitonians and basis, see section 2.5\n",
    "        terms, basis = get_ham_terms_and_basis(g, nbas)\n",
    "        model = Model(basis, terms)\n",
    "        h_mpo = Mpo(model)\n",
    "\n",
    "        # searching for the ground state.\n",
    "        for i_iter in range(10):\n",
    "            h_contracted = get_contracted_mpo(\n",
    "                h_mpo, b_array, n_qubit_per_mode, b_dof_pidx, psi_idx_top + psi_idx_bottom\n",
    "            )\n",
    "            # get \\theta_k via VQE\n",
    "            opt_res = scipy.optimize.minimize(opt_fn, args=(h_contracted,), x0=thetas / 2, jac=True, method=\"L-BFGS-B\")\n",
    "            print(f\"Iter {i_iter} VQE energy: {opt_res.fun}\")\n",
    "            thetas = opt_res.x\n",
    "            psi = ansatz(thetas).real\n",
    "            # Update b[l] via functions in section 2.6\n",
    "            for i in range(len(b_array)):\n",
    "                b_array[i] = solve_b_array(psi, h_mpo, b_array, i)\n",
    "        vqe_e.append(opt_res.fun)\n",
    "\n",
    "    print(vqe_e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a1f91b3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Energy')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the results\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "nbas = [4, 8, 12, 16, 20, 24, 28, 32]\n",
    "plt.scatter(nbas, vqe_e[0:8], label=\"g=1.5\")\n",
    "plt.scatter(nbas, vqe_e[8:], label=\"g=3.0\")\n",
    "plt.xlabel(\"Number of Phonon Levels\")\n",
    "plt.ylabel(\"Energy\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}